运维自动化概述
    运维发展经历：
    (1) 靠纯手工、重复地进行软件部署和运维
    (2) 通过编写脚本方便地进行软件部署和运维
    (3) 借助第三方工具高效、方便地进行软件部署和运维
    运维自动化：把零碎的工作集中化，把复杂的工作简单有序化，把流程规范化，最大化地解放生产力，也就是解放运维人员。自动化针对的范围可以大致分为安装自动化、部署自动化、监控自动化等方面。

    运维自动化工具：
    安装自动化          部署自动化          监控自动化
    kickstart           ansible             Nagios
    cobbler             ControlTier         Catci
    OpenQRM             Func                Zabbix
    Spacewalk           Puppet              Zenoss Core

===============================================

ansible自动化部署讲解：

开始前准备工作：
    1、关闭防火墙和selinux
    2、绑定主机名
    3、绑定hosts

由于ansilbe使用的是ssh协议，需先将每台服务器间设置好ssh等效性（密钥对登录）

1、生产key-values对
# ssh-keygen            # 全部回车即可
    Generating public/private rsa key pair.
    Enter file in which to save the key (/root/.ssh/id_rsa): 
    Created directory '/root/.ssh'.
    Enter passphrase (empty for no passphrase): 
    Enter same passphrase again: 
    ......

2、将公钥写入需要管理的服务器
# ssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@3.3.3.9

3、安装ansible软件包
# yum -y install ansible

# ll /etc/ansible
    总用量 24
    -rw-r--r-- 1 root root 19179 1月  30 2018 ansible.cfg       
    -rw-r--r-- 1 root root  1016 1月  30 2018 hosts     
    drwxr-xr-x 2 root root     6 1月  30 2018 roles

3、简单测试ansible的使用
# vim /etc/ansible/hosts        # 指定需要被管理的服务器
    [client]    # 指定服务器群组，下面的IP即为该群组的所有成员
    3.3.3.9
    3.3.3.10

    [webserver] # 群组可以有多个
    3.3.3.11
    3.3.3.12

4、使用ansible来ping一下所有被管理的服务器
# ansible client -m ping    # client 表示只查看这个群组里的主机，all 表示所有
    node2.com | SUCCESS => {
        "changed": false, 
        "ping": "pong"
    }
    node3.com | SUCCESS => {
        "changed": false, 
        "ping": "pong"
    }
    
========================================================

ansible 常用模块学习

# ansible-doc -l    # 列出 Ansible 支持的模块
# ansible-doc ping  # 查看ping模块帮助信息

==========================================================

1、command，该模块为ansible的默认模块，支持所有远程权限范围内的命令，不支持管道；例如：
# ansible client -m command -a 'free -m'        # 查看client群组下所有机器的内存使用情况
    node3.com | SUCCESS | rc=0 >>
                  total        used        free      shared  buff/cache   available
    Mem:            976         613          68           4         294         162
    Swap:          1999         225        1774

==========================================================

2、 shell，和command一样，且支持管道符号；例如：
# ansible client -m shell -a 'cat /etc/passwd|head -1'
    node2.com | SUCCESS | rc=0 >>
    root:x:0:0:root:/root:/bin/bash

==========================================================
    
3、script，在被管理的机器上执行管理机器上的脚本，相当于先scp，然后sh；例如：
# ansible client -m script -a '/root/test.sh'       # 在被管理机器执行本机的test.sh脚本
    node3.com | SUCCESS => {
        "changed": true, 
        "rc": 0, 
        "stderr": "Shared connection to node3.com closed.\r\n", 
        "stdout": "test\r\n", 
        "stdout_lines": [
            "test"
        ]
    }   

==========================================================


4、copy，实现从管理机器上拷贝文件到被管理机器上，类似scp功能；例如：
# ansible client -m copy -a 'src=/root/test.sh dest=/root/ owner=root group=root mode=0755" 

==========================================================

说明：
src     指定管理机器上的文件路径
dest    指定传过去后放在被管理机器的哪个目录
owner   指定传过去后文件所有者
group   指定传过去后文件所属组
mode    指定传过去后文件的权限

==========================================================

5、stat，获取被管理机器上的文件状态信息（atime,ctime,mtime,md5,uid,git等）；例如：
# ansible client -m stat -a 'path=/etc/passwd'

说明：
path    指定要查看的文件路径

==========================================================

6、get_url，实现让被管理机器下载指定url内容到指定文件内；例如：
# ansible client -m get_url -a 'url=http://www.baidu.com dest=/index.html mode=0440 force=yes'
说明：
url     指定要下载的url
dest    指定下载到哪里
mode    指定下载后文件权限

==========================================================

7、yum，实现管理被管理机器上的rpm包；例如：
# ansible client -m yum -a 'name=nmap'
说明：
name    指定要安装的rpm包名称

==========================================================

8、cron，修改被管理机的crontab任务；例如：
# ansible client -m cron -a 'name='check dirs' hour='5,2' job='ls -alh > /dev/null''

说明：
name    指定时间任务名称（加备注）
hour    指定时间任务周期
job     指定任务内容

创建后格式：
#Ansible: check dirs
* 5,2 * * * ls -alh > /dev/null

==========================================================

9、mount，实现被管理机的分区挂载(添加至/etc/fstab文件)；例如:
# ansible client -m mount -a 'name=/yum src=/dev/sdb1 fstype=ext4 opts=ro state=present'
说明：
name 指定挂载目录
src     指定挂载源
fstype  指定挂载源的文件系统类型
opts    指定挂载后的权限
state   状态

==========================================================

10、service，管理被管理机器上的服务（启动、停止、重启等）；例如：
# ansible client -m service -a "name=nginx state=stopped"   # 停止nginx(注意观察单词)
# ansible client -m service -a "name=nginx state=started"   # 启动nginx
# ansible client -m service -a "name=nginx state=restarted" # 重启nginx
# ansible client -m service -a "name=nginx state=reloaded"  # 重新加载nginx状态

说明：
name    指定服务名
state   指定需要执行的操作

==========================================================

11、user，实现被管理机器上的用户管理；例如：
# ansible client -m user -a "name=ninmu shell=/bin/sh home=/home/munin group=8888 uid=8888 comment='user ninmu'"

创建后格式：
ninmu:x:8888:1000:user ninmu:/home/munin:/bin/sh


说明：
name    指定用户名
shell   指定shell类型
home    指定用户家目录
group   指定用户所属组（前提是指定的组已经存在）
uid     指定用户uid
comment 指定用户描述项
remove  删除用户时是否删除家目录（remove=yes）
state   指定状态
        absent  删除用户
        
删除用户实例：
# ansible client -m user -a 'name=ninmu state=absent remove=yes'    从被管理机器上删除ninmu这个用户


==========================================================

12、file，被管理机器上的文件和目录管理（创建，删除）；例如：
创建目录：
# ansible client -m file -a 'name=/data mode=644 state=directory'

创建普通文件：
# ansible client -m file -a 'name=/data/test.txt mode=777 state=touch'

删除文件或目录：
# ansible client -m file -a 'name=/data/abc state=absent'

创建一个软连接：
# ansible client -m file -a 'name=/data/test.txt dest=/root/test state=link'

说明：
name    指定目录或文件名
mode    指定创建后文件或目录的权限
dest    指定目标路径
state   指定类型：
    directory   如果目录不存在则创建该目录
    touch       创建普通文件
    absent      删除文件或目录
    link        创建软链接
owner   指定所属用户 
group   指定所属组


 **********************************************
 * 更多模块，请自行查阅！！ 欢迎使用官方文档  *
 **********************************************

==========================================================



ansible-playbook 之 YAML语法
yaml文件是一种playbook使用的配置管理语言



***********************************************************

前提：
playbook动作脚本中，一定要注意不同级别间的缩进，多一个少
一个缩进空格都会导致整个脚本无法执行，且缩进符不能使用tab
所以；
                “一定要注意缩进”
                “一定要注意缩进”
                “一定要注意缩进”
        
*********************************************************


ansible基本目录结构说明：
# tree
.
├── ansible.cfg     # ansible主配置文件
├── hosts           # 存放被管理机器列表
└── roles           # 存放ansible的任务文件
    ├── files           # 存放要推送到被管理机器上的文件，调用该目录的文件无需加路径
    ├── tasks           # 存放yml执行文件
    ├── templates       # 存放可变文件（内部包含变量的）
    └── vars            # 存放定义变量的文件

==========================================================


变量设置
有些重复性的东西，如果不设置变量，那就需要每次重复写，有了变量，需要的时候直接调用设置好的变量即可

ansible变量设置格式

键值对（普通变量设置）
key: value
name: user1
: 与value之间必须有一个空格

list（列表）
name:
 - user1
 - user2
 - user3
- 与每一个value之间必须有一个空格

字典
name: zhangsan
shell: /bin/bash
home: /home/abc
: 与value之间必须有一个空格

也可以
{name: zhangsan, shell: /bin/bash, home: /home/abc}

==========================================================

ansible的变量分为几种：
1、写入vars目录的（可以理解为全局变量）
2、使用 vars: 直接写入动作脚本的（局部变量）
3、使用 with_items: 直接写入动作脚本的（迭代方式）

==========================================================

直接写入vars目录内的文件中，可理解为全局变量，任何动作脚本都可以调用
格式为 "key: values"；例如：
# vim /etc/ansible/vars/main.yml
user: test
ip: 3.3.3.3
dir: /etc/ansible

==========================================================

直接定义在动作脚本内的，这种方式定义的变量可以理解为局部变量，只有当前文件内有效
例如：
# vim /etc/ansible/main.yml
- name: add several users
  vars: 
    user1: testuser1
    user2: testuser2
  user: name={{ user1 }} state=present gorups=wheel         # {{ user1 }} 调用user1这个变量
  user: name={{ user2 }} state=present groups=wheel
  
  
  
实例：
批量添加用户：
# vim test.yml
---
- hosts: client
  remote_user: root
  vars:
    name1: user1
    name2: user2
  tasks:
  - name: add users
    user: name={{ user1 }} shell=/bin/sh home=/home/abc 
  - name:
    user: name={{ user2 }} shell=/bin/bash home=/home/abc  

批量删除用户：
# vim test.yml
---
- hosts: client
  remote_user: root
  vars:
    name1: user1
    name2: user2
  tasks:
  - name: add users
    user: name={{ user1 }} remove=yes state=absent
  - name:
    user: name={{ user2 }} remove=yes state=absent
    
批量安装和启动mariadb
# vim install_mariadb.yml
---
- hosts: client         # 指定被管理机器列表
  remote_user: root     # 指定执行以下动作的用户
  vars:                 # 设置变量
    rpm: mariadb
  tasks:                # 开始动作
  - name: install mariadb       # 声明以下动作备注
    yum:                        # 调用yum模块，对被管理机器上的软件进行管理
      name: "{{ rpm }}*"        # 指定需要管理的软件名称
  - name: start mariadb         
    service:                    # 调用service模块，对被管理机器上的服务进行管理
      name: "{{ rpm }}"         # 指定要管理的服务名称
      state: started            # 指定需要做的事务

批量卸载mariadb
# vim remove_mariadb.yml
---
- hosts: client
  remote_user: root
  vars:
    rpm: mariadb
  tasks:
  - name: stop mariadb
    service:
      name: "{{ rpm }}"
      state: stopped
  - name: remove mariadb
    yum:
      name: "{{ rpm }}*"
      state: absent
  
批量安装mariadb并拷贝预设好的配置文件至被管理机器上
---
- hosts: client
  remote_user: root
  vars:
    rpm: mariadb
  tasks:
  - name: install mariadb
    yum:
      name: "{{ rpm }}*"
  - name: copy config
    copy:
      src: /root/my.cnf
      dest: /etc/my.cnf
      owner: root
      group: root
      mode: 0755
  - name: create dir
    file:
      name: "{{ item }}"
      state: directory
      mode: 0755
      owner: mysql
      group: mysql
    with_items:
      - /data/mysql
      - /var/run/mysqld
      - /var/log/mysqld
  - name: start mariadb
    service:
      name: "{{ rpm }}"
      state: started  

==========================================================
 
将变量定义到vars目录中的实例（全局变量）
# mkdir roles/test/{vars,templates,files,tasks}     # 创建一个测试工作路径

# cd roles/test

# vim vars/main.yml         # 创建变量文件，将所有需要用到的变量都写入到这个文件
name: testuser
sh: /bin/sh
home: /home/abc
uid: 8888

# vim tasks/main.yml        # 创建动作文件，名称如果不是main.yml需要执行时手动指定
- name: add server user
  user:
    name: "{{ name }}"      # 直接调用变量，值是vars目录中的main.yml文件给出的
    shell: "{{ sh }}"
    home: "{{ home }}"
    uid: "{{ uid }}"
    
# vim adduser.yml
---
- hosts: client
  remote_user: root
  roles:
  - add_user
  
# ansible-playbook adduser.yml      # 执行刚刚定义的动作脚本
......

完成后到被管理机检查一下是否有testuser这个用户，看一下定义的内容是否正确

# cat /etc/passwd|tail -1
testuser:x:8888:8888::/home/abc:/bin/sh

 
# tree      上面几个脚本的关系
.
├── adduser.yml
├── files
├── tasks
│   └── main.yml
├── templates
└── vars
    └── main.yml

==========================================================
  
使用with_items: 定义的可迭代变量，调用时自动从上至下依次调用设置的所有值；
例1：
# vim /etc/ansible/useradd.yml
---
- hosts: client
  remote_user: root
  - name: add several users
    user: name={{ item }} state=present groups=wheel
    with_items:
      - testuser1
      - testuser2

例2：
with_items中元素还可为hash(字典)例如:
# vim /etc/ansible/useradd.yml
- hosts: client
  remote_user: root
  - name: add several users
    user: name={{ item.name }} state=present groups={{ item.groups }}
    with_items:
      - { name: 'testuser1', groups: 'wheel' }
      - { name: 'testuser2', groups: 'root' }

==========================================================
    
简单实战练习：
1、实现在被管理机器上批量添加用户
# cat add_user.yml 


2、实现在被管理机器上批量删除用户
# cat del_user.yml 


3、实现在被管理机器上批量安装httpd服务并启动
 
 


http://www.yamllint.com/        # 这是一个测试yaml语法格式的网站



 
 
==========================================================


template模块介绍：

# tree          # 树壮展示当前目录所有文件和子目录
.
├── ansible.cfg
├── hosts
├── roles
│   └── temp
│       ├── tasks
│       │   └── main.yml
│       ├── templates
│       │   └── test.j2
│       └── vars
│           └── main.yml
└── work_dir
    └── copy_configfile.yml


# cat roles/temp/vars/main.yml  # 定义变量目录
username: zhangsan
pass: 123

# cat roles/temp/templates/test.j2  # 可变文件，其中引用了两处变量文件名随意
    username={{ master_hostname }}
    password={{ pass }}

# cat work_dir/test.yml
- hosts: client
  remote_user: root
  roles:
    - temp

# cat roles/temp/tasks/main.yml     # 定义动作的yml文件
- name: copy configfile to nodes
  template:
    src: test.j2            # 源文件
    dest: /tmp/test.conf    # 目标地址及目标文件名称

# ansible-playbook work_dir/test.yml    
......

执行后，登录被管理机查看/tmp/是否有test.conf这个文件

# cat /tmp/test.conf
username=zhangsan 
password=123

说明：
    template模块类似于copy模块，但使用template时，会自动判断文件是否存在，如果存在，且两个文件内容一致，则不拷贝，且可以在拷贝过程中使用vars中设置的变量template模块类似于copy模块，但使用template时，会自动判断文件是否存在，如果存在，且两个文件内容一致，则不拷贝，且可以在拷贝过程中使用vars中设置的变量


    

练习：
1、通过上面的学习，是否可以使用 ansible 实现对多台服务器自动安装mariadb？

先给大家一个目录结构图，然后结合上面的内容，看看能不能写出来
# tree
.
├── ansible.cfg
├── hosts
├── roles
│   ├── del_mariadb
│   │   ├── tasks
│   │   │   └── main.yml
│   │   └── vars
│   │       └── main.yml
│   └── install_mariadb
│       ├── files
│       ├── install_mariadb.yml
│       ├── tasks
│       │   └── main.yml
│       ├── templates
│       │   └── my.cnf
│       └── vars
│           └── main.yml
└── work_dir
    ├── del_mariadb.yml
    └── install_mariadb.yml

    

in_mariadb.tar.gz


2、mariadb是rpm版本的，固然简单些，那如果让你使用ansible批量部署二进制版本的mysql呢？
要求：使用mariadb先批量卸载被管理机器上的mariadb，然后在批量部署好二进制版本的mysql，版本不限！

in_mysql.tar.gz



end 
